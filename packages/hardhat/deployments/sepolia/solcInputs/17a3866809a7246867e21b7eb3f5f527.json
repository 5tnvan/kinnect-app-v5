{
  "language": "Solidity",
  "sources": {
    "contracts/YourContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n// Useful for debugging. Remove when deploying to a live network.\n//import \"hardhat/console.sol\";\n\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * A smart contract that allows sending of payments from a wallet to a wallet\n * @author WildPay\n */\ncontract YourContract {\n\t// State Variables\n\taddress public immutable owner;\n\tstring public message = \"Dare to get paid?\";\n    mapping(address => uint256) public amountsReceived;  // Mapping to track amounts sent to each receiver\n\n\t// Events: a way to emit log statements from smart contract that can be listened to by external parties\n\tevent PaymentChange(\n\t\taddress indexed sender,\n\t\taddress indexed receiver,\n\t\tstring newMessage,\n\t\tuint256 value,\n        uint256 fee\n\t);\n\n\t// Constructor: Called once on contract deployment\n\t// Check packages/hardhat/deploy/00_deploy_your_contract.ts\n\tconstructor(address _owner) {\n\t\towner = _owner;\n\t}\n\n\t// Modifier: used to define a set of rules that must be met before or after a function is executed\n\t// Check the withdraw() function\n\tmodifier isOwner() {\n\n\t\trequire(msg.sender == owner, \"Not the Owner\");\n\t\t_;\n\t}\n\n\t/**\n * Function that allows anyone to send a payment to a receiver, updating the state variables\n *\n * @param _receiver (address) - address of the receiver\n * @param _message (string memory) - optional message associated with the payment\n */\nfunction setPayment(address _receiver, string memory _message) public payable {\n        require(msg.value > 0, \"Payment value must be higher than 0\");\n        require(_receiver != address(0), \"Receiver address cannot be zero\");\n\n        // Calculate 3% fee\n        uint256 fee = (msg.value * 3) / 100;\n        uint256 amountAfterFee = msg.value - fee;\n\n        // Track amounts sent to the contract\n        amountsReceived[_receiver] += amountAfterFee;\n\n        // Transfer 3% fee to the owner\n        (bool feeTransferSuccess, ) = owner.call{ value: fee }(\"\");\n        require(feeTransferSuccess, \"Failed to send fee to owner\");\n\n        emit PaymentChange(msg.sender, _receiver, _message, amountAfterFee, fee);\n    }\n\n\n\t/**\n\t * Function that allows the [msg.sender] to withdraw all the Ether they've received in the contract\n\t * The function can only be called by the [msg.sender]\n\t */\n\n    function withdraw() public {\n        uint256 amount = amountsReceived[msg.sender];\n        require(amount > 0, \"No amount to withdraw\");\n\n        amountsReceived[msg.sender] = 0;\n        (bool success, ) = msg.sender.call{ value: amount }(\"\");\n        require(success, \"Failed to send amount\");\n\n    }\n\n\t/**\n\t * Function that allows the owner to rescue all the Ether in the contract\n\t * The function can only be called by the owner\n\t */\n\n    function saveSwitch() public isOwner {\n\t\t(bool success, ) = owner.call{ value: address(this).balance }(\"\");\n\t\trequire(success, \"Failed to send Ether\");\n\t}\n\n\t/**\n\t * Function that allows the contract to receive ETH\n\t */\n\treceive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}